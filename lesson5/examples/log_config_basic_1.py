"""
Логирование с использованием модуля logging. Базовая настройка
"""

import logging  # всегда, уже встроенный пакет

import sys  # для стандартного вывода инфы в консоль

# Быстрая настройка логгирования может быть выполнена так:

logging.basicConfig(
    # файл, в который добавляются логируемые сообщения
    # filename="app_01.log",  # если это где-то не в текущем каталоге, полезно прописать путь
    stream=sys.stdout,  # чтобы записи выводились красным, stdout - вывод чёрным
    # формат формирования сообщения
    # %(levelname)s - уровень важности
    # %(asctime)s - дата попадания записи в журнал
    # %(message)s - текст сообщения
    format="%(levelname)-8s %(asctime)s %(message)s",
    # форматирование крайне важно, без него ничегоо записываться не будет
    # должно быть прописано хотя бы message, чтобы сообщения, кот мы будем оставлять в коде, попадали в консоль
    # levelname - уровень информации
    # asctime - время, когда эта инфа появилась
    # DEBUG 2021-10-28 08:38:07,661 Отладочная информация
    # будут обрабатывать сообщения с уровнем важности, равным указанному или выше
    # level=logging.INFO
    level=logging.DEBUG,  # указание уровня с кот нач выдаваться сообщения логирования
)

# Для использования логгера его нужно получить/создать функцией getLogger
# логгер - регистратор верхнего уровня
LOG = logging.getLogger('app.basic')

# После этого можно использовать логгирование таким образом
LOG.debug('Отладочная информация')
LOG.info('Информационное сообщение')
LOG.warning('Предупреждение')
LOG.error('Ошибка')
LOG.critical('Критическое общение')

# Обратите внимание, что не все сообщения попали в лог-файл. Почему?
# главное почему не стоит пользоваться базовой конфигурацией -
# там можно писать либо в файл, либо в стрим
